version: '2.1'

x-logging:
  &default-logging
  options:
    max-file: '1'
    compress: 'false'
  driver: local

networks:
  monitor-net:
    driver: bridge

volumes:
    prometheus_data: {}
    grafana_data: {}
    postgres_data: {}
    postgres2_data: {}
    nginx_certs: {}
    nginx_vhost: {}
    nginx_html: {}
    nginx_acme: {}

services:

######################################################################################
#####################            CLI CONTAINER                 #######################
######################################################################################

  cli:
    build:
      context: ./cli
    container_name: cli
    restart: unless-stopped
    tty: true
    networks:
      - monitor-net
    logging: *default-logging
    volumes:
      - ./cli/scripts:/home/graph/scripts


######################################################################################
#####################            IPFS CONTAINER                #######################
######################################################################################


  ipfs:
    image: ipfs/go-ipfs:v0.4.23
    container_name: ipfs
    expose:
      - 5001
    volumes:
      - ./data/ipfs:/data/ipfs
    networks:
      - monitor-net
    logging: *default-logging



######################################################################################
#####################           INDEX NODE CONTAINER 0         #######################
######################################################################################


  index-node-0:
    image: graphprotocol/graph-node:v0.26.0
    container_name: index-node-0
    depends_on:
      - postgres
    volumes:
      - ./graph-node-configs:/root/graph-node-configs/
      - ./postgres-socket:/var/run/postgresql
    environment:
      GRAPH_NODE_CONFIG: /root/graph-node-configs/index_node_0_config.toml
      postgres_host: ${DB_HOST:-postgres}
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-db-password}
      postgres_db: ${GRAPH_NODE_DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT:-https://ipfs.network.thegraph.com}'
      ETHEREUM_RPC_0: ${ETHEREUM_RPC_0}
      node_role: index-node
      node_id: index_node_0
      BLOCK_INGESTOR: index_node_0
      RUST_LOG: INFO
      GRAPH_LOG: ${GRAPHNODE_LOGLEVEL:-DEBUG}
      GRAPH_ETH_CALL_GAS: 50000000
      GRAPH_GETH_ETH_CALL_ERRORS: "out of gas"
      GRAPH_MAX_GAS_PER_HANDLER: 1000000000000000
      ETHEREUM_TRACE_STREAM_STEP_SIZE: ${ETHEREUM_TRACE_STREAM_STEP_SIZE:-50}
      ETHEREUM_BLOCK_BATCH_SIZE: ${ETHEREUM_BLOCK_BATCH_SIZE:-10}
      ETHEREUM_RPC_MAX_PARALLEL_REQUESTS: ${ETHEREUM_RPC_MAX_PARALLEL_REQUESTS:-64}
      GRAPH_ETHEREUM_MAX_BLOCK_RANGE_SIZE: ${GRAPH_ETHEREUM_MAX_BLOCK_RANGE_SIZE:-500}
      GRAPH_ETHEREUM_TARGET_TRIGGERS_PER_BLOCK_RANGE: ${GRAPH_ETHEREUM_TARGET_TRIGGERS_PER_BLOCK_RANGE:-200}
      GRAPH_KILL_IF_UNRESPONSIVE: "true"
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: ${FULLTEXT_SEARCH:-"true"}
      EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
    restart: unless-stopped
    expose:
      - 8001
      - 8000
      - 8030
      - 8040
    networks:
      - monitor-net
    logging: *default-logging





######################################################################################
#####################           QUERY NODE CONTAINER 0         #######################
######################################################################################


  query-node-0:
    image: graphprotocol/graph-node:v0.26.0
    container_name: query-node-0
    depends_on:
      - postgres
    volumes:
      - ./graph-node-configs:/root/graph-node-configs/
      - ./postgres-socket:/var/run/postgresql
    environment:
      GRAPH_NODE_CONFIG: /root/graph-node-configs/query_node_0_config.toml
      postgres_host: ${DB_HOST:-postgres}
      postgres_user: ${DB_USER:-graph-node}
      postgres_pass: ${DB_PASS:-db-password}
      postgres_db: ${GRAPH_NODE_DB_NAME:-graph-node}
      ipfs: '${IPFS_ENDPOINT:-https://ipfs.network.thegraph.com}'
      node_role: query-node
      node_id: query_node_0
      RUST_LOG: INFO
      GRAPH_LOG: INFO
      GRAPH_ETH_CALL_GAS: 50000000
      GRAPH_GETH_ETH_CALL_ERRORS: "out of gas"
      GRAPH_MAX_GAS_PER_HANDLER: 1000000000000000
      GRAPH_LOG_QUERY_TIMING: gql
      EXPERIMENTAL_SUBGRAPH_VERSION_SWITCHING_MODE: synced
      GRAPH_KILL_IF_UNRESPONSIVE: "true"
      GRAPH_LOG_QUERY_TIMING: ${GRAPH_LOG_QUERY_TIMING:-gql}
      GRAPH_ALLOW_NON_DETERMINISTIC_FULLTEXT_SEARCH: ${FULLTEXT_SEARCH:-"true"}
      VIRTUAL_HOST: ${QUERY_HOST}
      VIRTUAL_PORT: 8000
      LETSENCRYPT_HOST: ${QUERY_HOST}
    restart: unless-stopped
    expose:
      - 8001
      - 8000
      - 8020
      - 8030
      - 8040
    networks:
      - monitor-net
    logging:
        driver: "journald"


######################################################################################
#####################          NGINX PROXY CONTAINER           #######################
######################################################################################



  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - ./nginx-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - monitor-net
    restart: unless-stopped
    logging: *default-logging


######################################################################################
#####################            NGINX SSL CONTAINER           #######################
######################################################################################


  nginx-ssl:
    image: jrcs/letsencrypt-nginx-proxy-companion
    container_name: nginx-ssl
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - nginx_certs:/etc/nginx/certs
      - nginx_vhost:/etc/nginx/vhost.d
      - nginx_html:/usr/share/nginx/html
      - nginx_acme:/etc/acme.sh
    restart: unless-stopped
    networks:
      - monitor-net
    restart: unless-stopped
    environment:
      NGINX_PROXY_CONTAINER: nginx-proxy
      DEFAULT_EMAIL: ${EMAIL}
    logging: *default-logging



######################################################################################
#####################            POSTGRES CONTAINER            #######################
######################################################################################



  postgres:
    image: postgres:13.6
    container_name: postgres
    command: ["postgres", "-c", "shared_preload_libraries=pg_stat_statements"]
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-graph-node}
      POSTGRES_PASSWORD: ${DB_PASS:-db-password}
      POSTGRES_DB: ${GRAPH_NODE_DB_NAME:-graph-node}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-socket:/var/run/postgresql
    networks:
      - monitor-net
    expose:
      - 5432
    logging: *default-logging




######################################################################################
#####################          PROMETHEUS CONTAINER            #######################
######################################################################################



  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging





######################################################################################
#####################         NODE EXPORTER CONTAINER          #######################
######################################################################################



  nodeexporter:
    image: prom/node-exporter
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging



######################################################################################
#####################             CADVISOR CONTAINER           #######################
######################################################################################



  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    restart: unless-stopped
    expose:
      - 8080
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging



######################################################################################
#####################           GRAFANA CONTAINER              #######################
######################################################################################



  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_BRUTE_FORCE_LOGIN_PROTECTION=true
      - postgres_host=${DB_HOST:-postgres}
      - postgres_user=${DB_USER:-graph-node}
      - postgres_pass=${DB_PASS:-db-password}
      - postgres_db=${GRAPH_NODE_DB_NAME:-graph-node}
      - VIRTUAL_HOST=${GRAFANA_HOST}
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=${GRAFANA_HOST}
      - GF_INSTALL_PLUGINS=fifemon-graphql-datasource
      - subgraph_endpoint=${SUBGRAPH_ENDPOINT:-https://gateway.thegraph.com/network}
    restart: unless-stopped
    expose:
      - 3000
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging



######################################################################################
#####################          PUSHGATEWAY CONTAINER           #######################
######################################################################################



  pushgateway:
    image: prom/pushgateway
    container_name: pushgateway
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - monitor-net
    labels:
      org.label-schema.group: "monitoring"
    logging: *default-logging
